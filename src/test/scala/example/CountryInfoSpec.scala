package example

import com.holdenkarau.spark.testing.{DataFrameSuiteBase, SharedSparkContext}
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions._
import org.scalatest.FunSuite

class CountryInfoSpec extends FunSuite
  with SharedSparkContext
  with DataFrameSuiteBase {

  import spark.implicits._

  test("The CountryInfo should update valid Countries") {

    def addCountry(left: DataFrame, right: DataFrame): DataFrame =
      left.join(right, ('vid equalTo 'vid_cdb) and ('programstart_date between('validFrom, 'validTo)), "left")
        .withColumn("country", when('country_cdb isNotNull, 'country_cdb) otherwise 'country)
        .drop("vid_cdb", "country_cdb", "validFrom", "validTo")

    val left = Seq( //dishwascher
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20181214),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191214),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191215),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191216),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191217),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191218),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191219),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191220),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191221),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191222),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191223)
    ).toDF("vid", "country", "programstart_date")

    val right = Seq( //country
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191214, 20191214),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191215, 20191216),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "PL", 20191217, 20191218),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191219, 20191222),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "CN", 20191223, 99991230)
    ).toDF("vid_cdb", "country_cdb", "validFrom", "validTo")

    val expect = Seq(
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20181214),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "DE", 20191214),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191215),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191216),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "PL", 20191217),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "PL", 20191218),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191219),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191220),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191221),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "IT", 20191222),
      ("FFEAA2735B1F56BCC086437BA41294F9EEE69B6ADEBB93E7E880D9C2AA60E929", "CN", 20191223)
    ).toDF("vid", "country", "programstart_date")
     .orderBy('programstart_date)

    val actual = addCountry(left,right)
      .orderBy('programstart_date)

    assertDataFrameEquals(actual, expect)
  }
}
